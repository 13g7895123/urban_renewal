# 專案憲章 (Project Constitution)

## 核心原則 (Core Principles)

### 1. 程式碼品質 (Code Quality)

#### 1.1 語言規範
- **JavaScript 版本**: 使用 ES6+ 語法標準
- **TypeScript**: 不使用 TypeScript，專案完全採用 JavaScript
- **編碼標準**: 遵循 ESLint 和 Prettier 配置規範

#### 1.2 程式碼結構
- **模組化**: 每個功能模組應具有單一職責
- **可讀性**: 程式碼應清晰易懂，避免過度複雜的邏輯
- **可維護性**: 遵循 DRY (Don't Repeat Yourself) 原則
- **命名規範**:
  - 變數和函數使用英文命名（camelCase）
  - 類別使用 PascalCase
  - 常數使用 UPPER_SNAKE_CASE
  - 檔案名稱使用 kebab-case

#### 1.3 註解規範
- **語言**: 所有註解必須使用正體中文
- **函數註解**: 每個公開函數需包含功能說明
- **複雜邏輯**: 複雜的業務邏輯需加入詳細註解
- **TODO 標記**: 使用 `// TODO: [說明]` 標記待辦事項

```javascript
/**
 * 計算使用者的總積分
 * @param {Object} user - 使用者物件
 * @param {Array} activities - 活動記錄陣列
 * @returns {Number} 總積分
 */
function calculateTotalPoints(user, activities) {
  // 過濾有效的活動記錄
  const validActivities = activities.filter(activity => activity.isValid);
  // 計算總和
  return validActivities.reduce((sum, activity) => sum + activity.points, 0);
}
```

### 2. 文件規範 (Documentation Standards)

#### 2.1 語言要求
- **專案文件**: 使用正體中文撰寫
- **README 檔案**: 使用正體中文撰寫
- **API 文件**: 使用正體中文說明
- **技術規格**: 使用正體中文撰寫
- **Git Commit 訊息**: 使用正體中文，遵循 Conventional Commits 格式

#### 2.2 必要文件
- `README.md`: 專案概述、安裝指引、使用說明
- `API.md`: API 端點文件
- `CHANGELOG.md`: 版本更新記錄
- `CONTRIBUTING.md`: 貢獻指南
- `.specify/`: SpecKit 規格文件目錄

### 3. 使用者體驗一致性 (UX Consistency)

#### 3.1 UI 框架
- **前端框架**: Nuxt 3
- **UI 元件庫**: Nuxt UI（基於 Headless UI 和 Tailwind CSS）
- **圖示系統**: Heroicons
- **禁止使用**: Vuetify（已棄用，改用 Nuxt UI）

#### 3.2 設計系統
- **色彩主題**:
  - 主色：綠色漸層 (#2FA633 到 #72BB29)
  - 語意色：成功、警告、錯誤、資訊
- **間距系統**: 遵循 Tailwind CSS 間距規範
- **響應式設計**: 支援手機、平板、桌面裝置
- **無障礙設計**: 遵循 WCAG 2.1 AA 標準

#### 3.3 使用者介面文字
- **語言**: 所有使用者介面文字使用正體中文
- **錯誤訊息**: 使用正體中文，提供清楚的問題說明和解決建議
- **提示訊息**: 友善且具體的使用者提示

```javascript
// 正確示範
const errorMessages = {
  loginFailed: '登入失敗，請檢查帳號和密碼是否正確',
  networkError: '網路連線異常，請稍後再試',
  invalidInput: '輸入格式不正確，請重新輸入'
};
```

### 4. 效能要求 (Performance Requirements)

#### 4.1 前端效能
- **首次內容繪製 (FCP)**: < 1.8 秒
- **最大內容繪製 (LCP)**: < 2.5 秒
- **累積版面配置位移 (CLS)**: < 0.1
- **首次輸入延遲 (FID)**: < 100 毫秒
- **互動時間 (TTI)**: < 3.8 秒

#### 4.2 後端效能
- **API 回應時間**: < 200 毫秒（P95）
- **資料庫查詢**: 使用索引，避免 N+1 查詢
- **快取策略**: 適當使用 Redis 快取熱門資料
- **分頁處理**: 大量資料必須分頁載入

#### 4.3 資源優化
- **圖片優化**: 使用適當格式和壓縮
- **程式碼分割**: 使用動態 import 進行程式碼分割
- **Tree Shaking**: 移除未使用的程式碼
- **Bundle 大小**: JavaScript Bundle < 300KB（gzipped）

### 5. 安全性要求 (Security Requirements)

#### 5.1 身份驗證
- 使用 JWT Token 進行身份驗證
- Token 有效期設定合理的過期時間
- 實作 Refresh Token 機制

#### 5.2 資料保護
- 敏感資料加密存儲
- HTTPS 通訊
- SQL 注入防護（使用參數化查詢）
- XSS 防護（輸入驗證和輸出轉義）
- CSRF 防護

#### 5.3 CORS 設定
- 明確定義允許的來源
- 限制允許的 HTTP 方法
- 設定適當的快取時間

## 技術決策指南 (Technical Decision Guidelines)

### 1. 技術選型原則

#### 1.1 評估標準
- **社群活躍度**: 選擇有活躍社群支援的技術
- **文件完整性**: 優先選擇文件完整的技術
- **維護狀態**: 避免使用已棄用或停止維護的技術
- **學習曲線**: 考慮團隊學習成本
- **效能表現**: 符合專案效能要求

#### 1.2 技術堆疊
- **前端**: Nuxt 3 + Vue 3 + Nuxt UI + Tailwind CSS
- **後端**: CodeIgniter 4 (PHP)
- **資料庫**: MySQL
- **快取**: Redis（如需要）
- **容器化**: Docker + Docker Compose

### 2. 架構決策

#### 2.1 前端架構
- **組合式 API**: 優先使用 Vue 3 Composition API
- **狀態管理**: 使用 Pinia（必要時）
- **路由管理**: 使用 Nuxt 3 檔案路由系統
- **API 呼叫**: 使用 `$fetch` 或 `useFetch` composable

#### 2.2 後端架構
- **MVC 模式**: 嚴格遵循 Model-View-Controller 分離
- **RESTful API**: 遵循 REST 設計原則
- **控制器**: 輕量級，主要負責請求處理和回應
- **模型**: 封裝資料存取邏輯
- **服務層**: 複雜業務邏輯放在服務層

#### 2.3 資料庫設計
- **正規化**: 遵循第三正規化（3NF）
- **索引策略**: 為常用查詢欄位建立索引
- **外鍵約束**: 使用外鍵維護參照完整性
- **命名規範**: 表名使用複數形式，欄位使用蛇形命名法

### 3. 開發流程

#### 3.1 版本控制
- **分支策略**: Git Flow 或 GitHub Flow
- **主要分支**: `master` 或 `main`
- **開發分支**: `develop`
- **功能分支**: `feature/功能名稱`
- **修復分支**: `fix/問題描述`

#### 3.2 提交規範
```
<類型>: <簡短描述>

<詳細說明>（選填）

<相關議題>（選填）
```

**類型**:
- `feat`: 新功能
- `fix`: 錯誤修復
- `docs`: 文件更新
- `style`: 程式碼格式調整
- `refactor`: 程式碼重構
- `perf`: 效能優化
- `test`: 測試相關
- `chore`: 建置或輔助工具變動

**示例**:
```
feat: 實作使用者登入功能

- 新增登入表單元件
- 整合 JWT 身份驗證
- 實作記住我功能

相關議題: #123
```

#### 3.3 程式碼審查
- **必要性**: 所有程式碼合併前需經審查
- **審查重點**:
  - 程式碼品質和可讀性
  - 功能正確性
  - 效能影響
  - 安全性考量
  - 測試覆蓋率

### 4. 測試策略

#### 4.1 測試類型
- **單元測試**: 測試個別函數和元件
- **整合測試**: 測試模組間的互動
- **端對端測試**: 測試完整使用者流程

#### 4.2 測試工具
- **前端**: Vitest + Vue Test Utils
- **後端**: PHPUnit
- **E2E**: Playwright 或 Cypress

#### 4.3 測試覆蓋率
- **目標覆蓋率**: > 80%
- **關鍵業務邏輯**: 100% 覆蓋
- **持續監控**: 使用覆蓋率報告工具

## 最佳實踐 (Best Practices)

### 1. JavaScript ES6+ 最佳實踐

#### 1.1 使用現代語法
```javascript
// 使用 const/let 取代 var
const API_URL = 'https://api.example.com';
let currentUser = null;

// 使用箭頭函數
const getUserName = (user) => user.name;

// 使用解構賦值
const { name, email } = user;
const [first, second] = array;

// 使用展開運算符
const newArray = [...oldArray, newItem];
const newObject = { ...oldObject, newProp: value };

// 使用模板字串
const message = `歡迎 ${userName} 登入系統`;

// 使用可選鏈
const city = user?.address?.city;

// 使用空值合併運算符
const displayName = userName ?? '訪客';
```

#### 1.2 非同步處理
```javascript
// 優先使用 async/await
async function fetchUserData(userId) {
  try {
    const response = await fetch(`/api/users/${userId}`);
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('取得使用者資料失敗:', error);
    throw error;
  }
}

// 平行執行多個非同步操作
async function loadDashboardData() {
  const [users, stats, activities] = await Promise.all([
    fetchUsers(),
    fetchStats(),
    fetchActivities()
  ]);
  return { users, stats, activities };
}
```

#### 1.3 陣列方法
```javascript
// 使用陣列方法進行資料處理
const activeUsers = users.filter(user => user.isActive);
const userNames = users.map(user => user.name);
const totalPoints = users.reduce((sum, user) => sum + user.points, 0);
const hasAdmin = users.some(user => user.role === 'admin');
const allVerified = users.every(user => user.isVerified);
```

### 2. Vue 3 最佳實踐

#### 2.1 組合式 API
```javascript
// 使用 script setup 語法
<script setup>
import { ref, computed, onMounted } from 'vue';

// 響應式資料
const count = ref(0);
const user = ref(null);

// 計算屬性
const doubleCount = computed(() => count.value * 2);

// 方法
function increment() {
  count.value++;
}

// 生命週期
onMounted(() => {
  console.log('元件已掛載');
});
</script>
```

#### 2.2 Composables 模式
```javascript
// composables/useUser.js

/**
 * 使用者管理 Composable
 * 提供使用者資料和相關操作
 */
export function useUser() {
  const user = ref(null);
  const loading = ref(false);
  const error = ref(null);

  /**
   * 取得使用者資料
   * @param {String} userId - 使用者 ID
   */
  async function fetchUser(userId) {
    loading.value = true;
    try {
      const data = await $fetch(`/api/users/${userId}`);
      user.value = data;
    } catch (err) {
      error.value = err.message;
    } finally {
      loading.value = false;
    }
  }

  return {
    user,
    loading,
    error,
    fetchUser
  };
}
```

### 3. Nuxt 3 最佳實踐

#### 3.1 資料取得
```javascript
// 使用 useFetch 進行伺服器端渲染
const { data: users, pending, error } = await useFetch('/api/users');

// 使用 useAsyncData 自訂資料取得
const { data } = await useAsyncData('dashboard', () => {
  return $fetch('/api/dashboard');
});

// 客戶端資料取得
const fetchData = async () => {
  const data = await $fetch('/api/data');
};
```

#### 3.2 中介軟體
```javascript
// middleware/auth.js

/**
 * 身份驗證中介軟體
 * 檢查使用者是否已登入
 */
export default defineNuxtRouteMiddleware((to, from) => {
  const auth = useAuth();

  if (!auth.isAuthenticated) {
    return navigateTo('/login');
  }
});
```

### 4. CodeIgniter 4 最佳實踐

#### 4.1 控制器
```php
<?php

namespace App\Controllers;

use CodeIgniter\RESTful\ResourceController;

/**
 * 使用者控制器
 * 處理使用者相關的 API 請求
 */
class Users extends ResourceController
{
    protected $modelName = 'App\Models\UserModel';
    protected $format = 'json';

    /**
     * 取得使用者列表
     * @return Response
     */
    public function index()
    {
        $users = $this->model->findAll();

        return $this->respond([
            'status' => 'success',
            'data' => $users
        ]);
    }

    /**
     * 取得單一使用者
     * @param int $id 使用者 ID
     * @return Response
     */
    public function show($id = null)
    {
        $user = $this->model->find($id);

        if (!$user) {
            return $this->failNotFound('找不到使用者');
        }

        return $this->respond([
            'status' => 'success',
            'data' => $user
        ]);
    }
}
```

#### 4.2 模型
```php
<?php

namespace App\Models;

use CodeIgniter\Model;

/**
 * 使用者模型
 * 處理使用者資料的資料庫操作
 */
class UserModel extends Model
{
    protected $table = 'users';
    protected $primaryKey = 'id';
    protected $useTimestamps = true;
    protected $allowedFields = ['name', 'email', 'password', 'role'];

    protected $validationRules = [
        'name' => 'required|min_length[3]',
        'email' => 'required|valid_email|is_unique[users.email]',
        'password' => 'required|min_length[8]'
    ];

    protected $validationMessages = [
        'name' => [
            'required' => '姓名為必填欄位',
            'min_length' => '姓名至少需要 3 個字元'
        ],
        'email' => [
            'required' => '電子郵件為必填欄位',
            'valid_email' => '請輸入有效的電子郵件格式',
            'is_unique' => '此電子郵件已被使用'
        ]
    ];

    /**
     * 取得啟用的使用者
     * @return array
     */
    public function getActiveUsers()
    {
        return $this->where('is_active', 1)->findAll();
    }
}
```

## 治理機制 (Governance Mechanisms)

### 1. 決策流程

#### 1.1 技術決策
1. **提案**: 團隊成員提出技術改進提案
2. **討論**: 團隊討論提案的優缺點
3. **評估**: 依據評估標準進行評分
4. **決策**: 達成共識後實施
5. **記錄**: 在 ADR (Architecture Decision Record) 中記錄

#### 1.2 變更管理
- **小型變更**: 可直接提交 PR
- **中型變更**: 需經過程式碼審查
- **重大變更**: 需經過設計審查和團隊討論

### 2. 品質門檻 (Quality Gates)

#### 2.1 合併前檢查
- ✅ 程式碼審查通過
- ✅ 所有測試通過
- ✅ 測試覆蓋率達標
- ✅ 無嚴重安全漏洞
- ✅ 效能指標符合要求
- ✅ 文件已更新

#### 2.2 發布前檢查
- ✅ 所有功能測試通過
- ✅ 整合測試通過
- ✅ 效能測試通過
- ✅ 安全性掃描通過
- ✅ 文件完整且更新
- ✅ CHANGELOG 已更新

### 3. 持續改進

#### 3.1 定期審查
- **每月**: 程式碼品質報告審查
- **每季**: 技術債務評估
- **每半年**: 技術堆疊評估
- **每年**: 架構審查

#### 3.2 指標監控
- 程式碼品質指標（複雜度、重複率等）
- 效能指標（回應時間、吞吐量等）
- 錯誤率和可用性
- 測試覆蓋率趨勢

#### 3.3 回饋機制
- 團隊回顧會議
- 使用者回饋收集
- 錯誤報告分析
- 效能監控警報

## 附錄 (Appendix)

### A. 參考資源

#### JavaScript/ES6+
- [MDN JavaScript 文件](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript)
- [JavaScript.info](https://javascript.info/)
- [ES6 Features](http://es6-features.org/)

#### Vue 3 / Nuxt 3
- [Vue 3 官方文件](https://vuejs.org/)
- [Nuxt 3 官方文件](https://nuxt.com/)
- [Nuxt UI 文件](https://ui.nuxt.com/)

#### CodeIgniter 4
- [CodeIgniter 4 官方文件](https://codeigniter.com/user_guide/)
- [CodeIgniter 4 最佳實踐](https://codeigniter.com/user_guide/general/common_functions.html)

#### 工具與規範
- [Conventional Commits](https://www.conventionalcommits.org/)
- [Tailwind CSS 文件](https://tailwindcss.com/)
- [ESLint 規則](https://eslint.org/docs/rules/)

### B. 檢查清單

#### 新功能開發檢查清單
- [ ] 需求明確且已記錄
- [ ] 設計方案已審查
- [ ] 程式碼遵循規範
- [ ] 包含單元測試
- [ ] 包含整合測試
- [ ] 效能符合要求
- [ ] 安全性已考慮
- [ ] 文件已更新
- [ ] 註解使用正體中文
- [ ] 程式碼審查通過

#### 錯誤修復檢查清單
- [ ] 問題根因已識別
- [ ] 修復方案已確認
- [ ] 包含回歸測試
- [ ] 未引入新問題
- [ ] 文件已更新（如需要）
- [ ] CHANGELOG 已更新

---

**版本**: 1.0.0
**最後更新**: 2025-10-08
**維護者**: Urban Renewal Project Team
