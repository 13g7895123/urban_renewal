{"version":3,"file":"auth-DtdpP6ex.js","sources":["../../../../composables/useApi.js","../../../../stores/auth.js"],"sourcesContent":["/**\r\n * Base API composable for handling HTTP requests\r\n */\r\nexport const useApi = () => {\r\n  const config = useRuntimeConfig()\r\n  \r\n  // Get base URL from environment - handle development vs production\r\n  const getBaseURL = () => {\r\n    // Check if we're in development mode\r\n    const isDev = process.dev || process.env.NODE_ENV === 'development'\r\n    \r\n    if (isDev) {\r\n      // In development, use proxy\r\n      console.log('[API] Using development proxy: /api')\r\n      return '/api'\r\n    }\r\n    \r\n    // In production, always use the full API URL\r\n    const apiBaseUrl = config.public.apiBaseUrl || config.public.backendUrl\r\n    if (apiBaseUrl && apiBaseUrl !== '/api') {\r\n      console.log('[API] Using production API URL:', apiBaseUrl)\r\n      return apiBaseUrl\r\n    }\r\n    \r\n    // Ensure we never use relative paths in production\r\n    const productionUrl = 'https://project.mercylife.cc/api'\r\n    console.log('[API] Using fallback production URL:', productionUrl)\r\n    return productionUrl\r\n  }\r\n  \r\n  const baseURL = getBaseURL()\r\n  \r\n  // Log the resolved base URL for debugging\r\n  console.log('[API] Base URL resolved to:', baseURL)\r\n  \r\n  // Get authentication token\r\n  const getAuthToken = () => {\r\n    if (process.client) {\r\n      return localStorage.getItem('auth_token')\r\n    }\r\n    return null\r\n  }\r\n  \r\n  // Get authentication headers\r\n  const getAuthHeaders = () => {\r\n    const token = getAuthToken()\r\n    if (token) {\r\n      return {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    }\r\n    return {}\r\n  }\r\n\r\n  /**\r\n   * Generic API request handler\r\n   */\r\n  const apiRequest = async (endpoint, options = {}) => {\r\n    const authHeaders = getAuthHeaders()\r\n    \r\n    const defaultOptions = {\r\n      baseURL,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        ...authHeaders,\r\n        ...options.headers\r\n      },\r\n      ...options\r\n    }\r\n\r\n    try {\r\n      console.log(`[API] ${defaultOptions.method || 'GET'} ${baseURL}${endpoint}`)\r\n      const response = await $fetch(endpoint, defaultOptions)\r\n      console.log(`[API] Success: ${baseURL}${endpoint}`)\r\n      return {\r\n        success: true,\r\n        data: response,\r\n        error: null\r\n      }\r\n    } catch (error) {\r\n      console.error(`[API] Error ${defaultOptions.method || 'GET'} ${baseURL}${endpoint}:`, error)\r\n      console.error('[API] Full URL:', `${baseURL}${endpoint}`)\r\n      console.error('[API] Options:', defaultOptions)\r\n      \r\n      // Handle authentication errors\r\n      if (error.status === 401 || error.statusCode === 401) {\r\n        console.warn('[API] Authentication error - clearing auth state')\r\n        \r\n        // Clear authentication data\r\n        if (process.client) {\r\n          localStorage.removeItem('auth_token')\r\n          localStorage.removeItem('auth_user')\r\n        }\r\n        \r\n        // Redirect to login page (only if not already on login page)\r\n        if (process.client && !window.location.pathname.includes('/auth/login')) {\r\n          try {\r\n            await navigateTo('/auth/login')\r\n          } catch (navError) {\r\n            // If Nuxt navigation fails, fall back to window.location\r\n            console.warn('[API] Navigation failed, using window.location fallback:', navError)\r\n            window.location.href = '/login'\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Provide more detailed error information\r\n      const errorDetails = {\r\n        message: error.data?.message || error.message || '請求失敗',\r\n        status: error.status || error.statusCode || 500,\r\n        statusText: error.statusText || error.statusMessage || 'Internal Server Error',\r\n        url: `${baseURL}${endpoint}`,\r\n        method: defaultOptions.method || 'GET',\r\n        errors: error.data?.errors || null\r\n      }\r\n      \r\n      // Special handling for different error status codes\r\n      if (errorDetails.status === 404) {\r\n        errorDetails.message = `API endpoint not found: ${errorDetails.url}`\r\n      } else if (errorDetails.status === 401) {\r\n        errorDetails.message = error.data?.message || '登入已過期，請重新登入'\r\n      } else if (errorDetails.status === 403) {\r\n        // Preserve the specific 403 error message from backend\r\n        errorDetails.message = error.data?.message || '權限不足'\r\n      } else if (errorDetails.status === 422) {\r\n        errorDetails.message = error.data?.message || '表單驗證失敗'\r\n      } else if (errorDetails.status >= 500) {\r\n        errorDetails.message = error.data?.message || '伺服器錯誤，請稍後再試'\r\n      }\r\n      \r\n      return {\r\n        success: false,\r\n        data: null,\r\n        error: errorDetails\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * GET request\r\n   */\r\n  const get = async (endpoint, params = {}) => {\r\n    return await apiRequest(endpoint, {\r\n      method: 'GET',\r\n      params\r\n    })\r\n  }\r\n\r\n  /**\r\n   * POST request\r\n   */\r\n  const post = async (endpoint, body = {}) => {\r\n    return await apiRequest(endpoint, {\r\n      method: 'POST',\r\n      body\r\n    })\r\n  }\r\n\r\n  /**\r\n   * PUT request\r\n   */\r\n  const put = async (endpoint, body = {}) => {\r\n    return await apiRequest(endpoint, {\r\n      method: 'PUT',\r\n      body\r\n    })\r\n  }\r\n\r\n  /**\r\n   * PATCH request\r\n   */\r\n  const patch = async (endpoint, body = {}) => {\r\n    return await apiRequest(endpoint, {\r\n      method: 'PATCH',\r\n      body\r\n    })\r\n  }\r\n\r\n  /**\r\n   * DELETE request\r\n   */\r\n  const del = async (endpoint) => {\r\n    return await apiRequest(endpoint, {\r\n      method: 'DELETE'\r\n    })\r\n  }\r\n\r\n  // Token management utilities\r\n  const setAuthToken = (token) => {\r\n    if (process.client) {\r\n      localStorage.setItem('auth_token', token)\r\n    }\r\n  }\r\n  \r\n  const clearAuthToken = () => {\r\n    if (process.client) {\r\n      localStorage.removeItem('auth_token')\r\n      localStorage.removeItem('auth_user')\r\n    }\r\n  }\r\n  \r\n  return {\r\n    get,\r\n    post,\r\n    put,\r\n    patch,\r\n    delete: del,\r\n    apiRequest,\r\n    getAuthToken,\r\n    getAuthHeaders,\r\n    setAuthToken,\r\n    clearAuthToken\r\n  }\r\n}","export const useAuthStore = defineStore('auth', () => {\r\n  // 用戶狀態\r\n  const user = ref(null)\r\n  const token = ref(null)\r\n  const isLoggedIn = computed(() => !!user.value && !!token.value)\r\n  const isAdmin = computed(() => user.value?.role === 'admin')\r\n  const isLoading = ref(false)\r\n  \r\n  // Token storage keys\r\n  const TOKEN_KEY = 'auth_token'\r\n  const USER_KEY = 'auth_user'\r\n\r\n  // 登入功能\r\n  const login = async (credentials) => {\r\n    try {\r\n      isLoading.value = true\r\n      \r\n      // 準備登入數據 - 後端期望 'login' 字段而非 'username'\r\n      const loginData = {\r\n        login: credentials.username,\r\n        password: credentials.password\r\n      }\r\n      \r\n      // 使用API composable進行登入\r\n      const { post } = useApi()\r\n      const response = await post('/auth/login', loginData)\r\n      \r\n      if (!response.success) {\r\n        throw new Error(response.error?.message || '登入失敗')\r\n      }\r\n      \r\n      const { user: userData, token: userToken } = response.data.data\r\n      \r\n      // 設定用戶資料和token\r\n      user.value = userData\r\n      token.value = userToken\r\n      \r\n      // 儲存到 localStorage\r\n      if (process.client) {\r\n        localStorage.setItem(TOKEN_KEY, userToken)\r\n        localStorage.setItem(USER_KEY, JSON.stringify(userData))\r\n      }\r\n      \r\n      return { success: true, user: userData, token: userToken }\r\n    } catch (error) {\r\n      console.error('Login error:', error)\r\n      throw new Error(error.message || '登入失敗')\r\n    } finally {\r\n      isLoading.value = false\r\n    }\r\n  }\r\n\r\n\r\n  // 登出功能\r\n  const logout = async (skipApiCall = false) => {\r\n    try {\r\n      // 如果有token且不跳過API調用，則調用後端登出\r\n      if (token.value && !skipApiCall) {\r\n        const { post } = useApi()\r\n        await post('/auth/logout')\r\n      }\r\n    } catch (error) {\r\n      console.error('Logout API error:', error)\r\n      // 即使API調用失敗，仍然清除本地狀態\r\n    } finally {\r\n      // 清除所有認證狀態\r\n      user.value = null\r\n      token.value = null\r\n      \r\n      // 清除 localStorage\r\n      if (process.client) {\r\n        localStorage.removeItem(TOKEN_KEY)\r\n        localStorage.removeItem(USER_KEY)\r\n      }\r\n      \r\n      // 重定向到登入頁面\r\n      await navigateTo('/auth/login')\r\n    }\r\n  }\r\n\r\n  // 獲取當前用戶信息\r\n  const fetchUser = async () => {\r\n    try {\r\n      if (!token.value) return null\r\n      \r\n      const { get } = useApi()\r\n      const response = await get('/auth/me')\r\n      \r\n      if (!response.success) {\r\n        throw new Error('Failed to fetch user data')\r\n      }\r\n      \r\n      const userData = response.data.data.user\r\n      user.value = userData\r\n      \r\n      // 更新 localStorage 中的用戶資料\r\n      if (process.client) {\r\n        localStorage.setItem(USER_KEY, JSON.stringify(userData))\r\n      }\r\n      \r\n      return userData\r\n    } catch (error) {\r\n      console.error('Fetch user error:', error)\r\n      // 如果獲取用戶資料失敗，清除認證狀態\r\n      await logout(true)\r\n      return null\r\n    }\r\n  }\r\n  \r\n  // 初始化用戶狀態 (改善SSR處理)\r\n  const initializeAuth = async () => {\r\n    if (process.client) {\r\n      const savedToken = localStorage.getItem(TOKEN_KEY)\r\n      const savedUser = localStorage.getItem(USER_KEY)\r\n      \r\n      if (savedToken && savedUser) {\r\n        try {\r\n          token.value = savedToken\r\n          user.value = JSON.parse(savedUser)\r\n          \r\n          // 不要在初始化時立即驗證token，避免頁面刷新時的重定向問題\r\n          // token驗證會在middleware中按需進行\r\n        } catch (error) {\r\n          console.error('Failed to parse saved auth data:', error)\r\n          // 清除無效的儲存數據\r\n          localStorage.removeItem(TOKEN_KEY)\r\n          localStorage.removeItem(USER_KEY)\r\n          user.value = null\r\n          token.value = null\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // 更新用戶資料\r\n  const updateProfile = async (profileData) => {\r\n    try {\r\n      const { put } = useApi()\r\n      const response = await put('/profile', profileData)\r\n      \r\n      if (!response.success) {\r\n        throw new Error(response.error?.message || '更新失敗')\r\n      }\r\n      \r\n      const updatedUser = response.data.data.user\r\n      user.value = updatedUser\r\n      \r\n      // 更新 localStorage\r\n      if (process.client) {\r\n        localStorage.setItem(USER_KEY, JSON.stringify(updatedUser))\r\n      }\r\n      \r\n      return { success: true, user: updatedUser }\r\n    } catch (error) {\r\n      console.error('Update profile error:', error)\r\n      throw new Error(error.message || '更新失敗')\r\n    }\r\n  }\r\n  \r\n  // 更改密碼\r\n  const changePassword = async (passwordData) => {\r\n    try {\r\n      const { put } = useApi()\r\n      const response = await put('/auth/change-password', passwordData)\r\n      \r\n      if (!response.success) {\r\n        throw new Error(response.error?.message || '密碼更改失敗')\r\n      }\r\n      \r\n      return { success: true, message: '密碼更改成功' }\r\n    } catch (error) {\r\n      console.error('Change password error:', error)\r\n      throw new Error(error.message || '密碼更改失敗')\r\n    }\r\n  }\r\n  \r\n  // 刷新token\r\n  const refreshToken = async () => {\r\n    try {\r\n      const { post } = useApi()\r\n      const response = await post('/auth/refresh')\r\n      \r\n      if (!response.success) {\r\n        throw new Error('Token refresh failed')\r\n      }\r\n      \r\n      const newToken = response.data.data.token\r\n      token.value = newToken\r\n      \r\n      // 更新 localStorage\r\n      if (process.client) {\r\n        localStorage.setItem(TOKEN_KEY, newToken)\r\n      }\r\n      \r\n      return newToken\r\n    } catch (error) {\r\n      console.error('Refresh token error:', error)\r\n      await logout(true)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  return {\r\n    // 狀態\r\n    user: readonly(user),\r\n    token: readonly(token),\r\n    isLoggedIn,\r\n    isAdmin,\r\n    isLoading: readonly(isLoading),\r\n    \r\n    // 認證方法\r\n    login,\r\n    logout,\r\n    initializeAuth,\r\n    fetchUser,\r\n    \r\n    // 用戶管理\r\n    updateProfile,\r\n    changePassword,\r\n    refreshToken\r\n  }\r\n})"],"names":[],"mappings":"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"}